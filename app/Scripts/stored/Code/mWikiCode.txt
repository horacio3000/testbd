 CREATE SEQUENCE datasets_datasetid_seq;
SELECT setval('datasets_datasetid_seq', coalesce(max(public.datasets.datasetid), 0) + 1, false) FROM public.datasets;
ALTER TABLE public.datasets alter COLUMN datasetid SET DEFAULT nextval('datasets_datasetid_seq');

///////////////////////////////////////////////////////////////////////////////

<form action="{{mconfig.mUrl}}/mDataBase/UpdateCommentToProject" enctype="multipart/form-data"
  id="form_UpdateCommentToProject" method="post" style="display:inline-block;width:100%" target="mIframeNovisible">
  <input [id]="'mCommentsHidden'" type="hidden" [name]="'mComments'" [value]="mCommentsHidden">
</form>

///////////////////////////////////////////////////////////////////////////////

 @Input() mTitle: string;
 <app-m-titles mTitle="הגדרת בדיקות"></app-m-titles>

//////////////////////////EN EL CHILD////////MANDANDO: CH TO P/////////////
  @Output() FromSelectionZonesUIEvent = new EventEmitter<string>();

  FromSelectionZonesUI() {
    this.FromSelectionZonesUIEvent.emit(this.mMapSelector.Validation());
  }
  //////////////////EN EL PARENT/////MANDANDO: CH TO P//////////////////////////
 <app-selection-zones-ui (FromSelectionZonesUIEvent)="FromSelectionZonesUI($event)">
  FromSelectionZonesUI(mCheck: string) {
    this.createnewproject.bSelectionZones = (mCheck === 'true')
  }





  ///////////////////////MANSO: P TO CH////////////////////////////////////////////////////
//EN EL PARENT

eventsSubject: Subject<void> = new Subject<void>();
emitEventToChild() {
  this.eventsSubject.next();
}

parent html/////////////////////////
<child [events]="eventsSubject.asObservable()"> </child>

EN EL child ////////////////////////////////
private eventsSubscription: Subscription;
@Input() events: Observable<void>;

ngOnInit(){
  this.eventsSubscription = this.events.subscribe(() => doSomething());
}

////////////////////////////////////////////////////////////
















               <!-----NO BORRAR PORQUE ESTE FORMAT DIO LABURO COGERLO
                <input [value]="item.EndedAt" data-date="" data-date-format="DD MMMM YYYY"
                  class="mtextinput" [(ngModel)]="item.StartedAt" type="date"
                  style="width:160px;color:#f2953c;padding:1px">
                ------->

[ngClass]="{'mTextShadow' : item.mStatusDesc === 'בהמתנה'}
[ngClass]="{'redStatus' : item.mStatusDesc === 'בהמתנה', 'yellowStatus' : item.mStatusDesc === 'בתהליך',
'greenStatus' : item.mStatusDesc === 'סיום' }" class="redStatus"


this.mSettingSet.sort(function (a, b) { return a.setID - b.setID })


 //Getting the next id sample
    let mIndex = 0;
    if (this.settingList.length > 0) {
      // tslint:disable-next-line: no-eval
      mIndex = eval('this.settingList.sort( function( a, b ) { return b.mID - a.mID } )[ 0 ].mID;');
    }

    mIndex++;

   AddSettingSetByEnter(mEvent: any): void {
    if (mEvent.keyCode === 13) {// Enter
      this.AddSettingSet();
    }
  }


  <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" fragment="education">
  link to user component
</a>



  constructor(private _http: HttpClient, private route: ActivatedRoute) { }
       route.queryParams.subscribe(param => {
            this.descriptionModel.UserID = param['uid'];
        });











                                                                    <div class="mtooltip outlab1">
                                                                        <div>
                                                                            עריכה חלקית
                                                                        </div>
                                                                        <img style="opacity: 0.8" src="../../../assets/img/glyphicons_free/glyphicons/png/glyphicons-31WHITE-pencil.png">

                                                                   </div>








-----------------------------------------------------------------------------------------------------

import { commons } from '../Script/commons';
    var params = new HttpParams().set('userID',this.descriptionModel.UserID );

    const mQueryString: string = this.mCom.JoinToMvc('descriptions','Insert')

    _http.get<number>(mQueryString, { params })
      .subscribe((res) => {



      });

------------------------------------------------------------------------------------



    var params = new HttpParams().set('mNewWorker', JSON.stringify(this.userListKablan));
    const mQueryString: string = this.mconfig.mUrl + '/mDataBase/InsertNewWorker';

    mhttp.get<number>(mQueryString, { params })
      .subscribe((res) => {

       // to avoid tslint message
        params = null;
      });


-------------------------------------------------------------------------------------

      const obs = this.mhttp.get<GetUserWikiDatas>(this.mcommons.workerIDQString)
        .subscribe((res) => {

        });

-----------------------------------------------------------------------------------

    this.route.queryParams.subscribe(param => {
      this.userID = param['uid'];
      this.descrid = param['descr']
   })


   ___________________________________________________




                                <!------------------QUETA PAGING------------->
                       <div style="width: 100%;padding: 0px;text-align: center;display: block;">
                              <div class="mTableMiddle" style="width: 100%;">
                                <div>
                                  <div style="width: 220px;text-align: right;">
                                    <mat-form-field appearance="fill" style="width: 100%">
                                      <mat-label class="outcontitle">חפש בדיקות</mat-label>
                                      <input (keyup)="SearchFeatures()" matInput [(ngModel)]="searchFeatureString">
                                    </mat-form-field>


                                  </div>

                                  <div style="width: 30px;"></div>

                                  <div style="cursor:pointer;width: 30px;" (click)="FilterFeaturesByPagingUI(false)">
                                    <div>
                                      <div [hidden]="curentFeaturePaging == 1">
                                        <div
                                          style="display:block;height:30px;right:30px;background-image: url('../../../assets/img/rightorange.png');background-repeat: no-repeat;">
                                        </div>
                                      </div>
                                    </div>
                                  </div>


                                  <div style="width: 90px;text-align: center;"><input
                                      (keyup)="FilterFeaturesByPagingUI(null)" type="number"
                                      [(ngModel)]="curentFeaturePaging"
                                      style="font-weight: bold;font-size: 13pt;  color:inherit;text-align:center;width: 80px;height:28px;border:solid 1px #f0d6be">
                                  </div>

                                  <div style="cursor:pointer;width: 30px;" (click)="FilterFeaturesByPagingUI(true)">
                                    <div>
                                      <div [hidden]="FeatureFlagMax == true">
                                        <div
                                          style="display:block;height:30px;right:30px;background-image: url('../../../assets/img/leftorange.png');background-repeat: no-repeat;">
                                        </div>
                                      </div>
                                    </div>
                                  </div>


                                  <div style="width: 10px"></div>
                                  <div style="width: auto;text-align: right;">
                                    <span
                                      style="font-weight: bold;font-size: 13pt;  color:inherit">{{pagingFeatureLabel}}</span>
                                  </div>
                                  <div style="width: 10px"></div>
                                </div>
                              </div>
                            </div>

   <!------------------QUETA PAGING------------->



                                  // QUETA PAGIN FEATURES/////

  SearchFeatures(): void {
    this.curentFeaturePaging = 1;
    this.SearchFeatureInternal();
    this.FilterFeaturesByPaging();
  }


  SearchFeatureInternal(): void {
    if (this.searchFeatureString.trim().toLowerCase() === '') {
      this.mTempoFeaturesFiltered = this.mTempoFeatures;
      return;
    }

    this.mTempoFeaturesFiltered = this.mTempoFeatures.filter(x => x.strTitle.toLowerCase().
      indexOf(this.searchFeatureString.toLowerCase()) !== -1);
  }


  FilterFeaturesByPaging(): void {
    // tslint:disable-next-line: array-type
    const min: number = (this.curentFeaturePaging * this.pagingCountingBy) - this.pagingCountingBy;
    const max: number = (this.curentFeaturePaging * this.pagingCountingBy);


    let iMax = 0;
    // tslint:disable-next-line: prefer-for-of
    for (let i = 0; i < this.mTempoFeaturesFiltered.length; i++) {
      if (i >= min && i < max) {
        this.mTempoFeaturesFiltered[i].bActive = true;
        iMax = i + 1;
      }
      else {
        this.mTempoFeaturesFiltered[i].bActive = false;
      }
    }


    if (this.mTempoFeaturesFiltered.length === iMax) {
      this.FeatureFlagMax = true;
    } else {
      this.FeatureFlagMax = false;
    }


    this.pagingFeatureLabel = this.mTempoFeaturesFiltered.length + ' / ' + (min + 1).toString() + '-' + (iMax).toString();
    this.mTempoFeaturesFiltered = this.mTempoFeaturesFiltered.filter(x => x.bActive === true);

  }

  FilterFeaturesByPagingUI(bSum: boolean): void {
    this.SearchFeatureInternal();
    this.SetCurrentPagingFeatures(bSum);
    this.FilterFeaturesByPaging();
  }

  SetCurrentPagingFeatures(bSum: boolean): void {
    if (bSum) {
      this.curentFeaturePaging++;
    }

    if (bSum === false) {
      this.curentFeaturePaging--;
    }

    if (this.curentFeaturePaging < 1) {
      this.curentFeaturePaging = 1;
    }




    if ((this.curentFeaturePaging * this.pagingCountingBy) > this.mTempoFeaturesFiltered.length) {
      this.curentFeaturePaging = Math.ceil(this.mTempoFeaturesFiltered.length / this.pagingCountingBy);
    }
  }

                                <!------------------END QUETA PAGING------------->


 SortByWorkeName() {

  orderByWorkerWarning(mFlag: boolean) {
    this.warningDatas.warning.sort(function (a, b) {
      if (a.workerwarName > b.workerwarName)
        return ((mFlag) ? -1 : 1);
      else return ((mFlag) ? 1 : -1);
    })

    this.mTempoWarningssFiltered = this.warningDatas.warning;
    this.SearchWarningss();

  }

  }


  //////////////////////////////////////////////

    SortByProgramedToStartDate() {
    this.mProjects.sort(function (a, b) {
      if (a.programedToStartAt < b.programedToStartAt)
        return -1;
    });
  }

//para chekboss

    <mat-checkbox [checked]="true" (change)="SetAllWorkers($event)"
                              style="position: absolute;top:4px;">
                            </mat-checkbox>

  SetAllWorkers(mEvent: any) {
    mEvent.target.checked
  }


<a [routerLink]="['/products']" [queryParams]="{ order: 'popular'}">
  Products
</a>
goUsers() {
  this.router.navigate(['/users'], { queryParams: { filter: 'new' }, queryParamsHandling: 'merge' });
}





this.yearslst = this.yearslst.filter(this.mcommons.onlyUnique);




    this.mProjects.sort(function (a, b) {

      const date1 = a.chekedOutAt;
      const date2 = b.chekedOutAt;

      if (date1 == null && date2 != null) return ((mFlag ? -1 : 1));
      if (date1 != null && date2 == null) return ((mFlag ? 1 : -1));
      if (date1 > date2) return ((mFlag ? 1 : -1));
      if (date1 < date2) return ((mFlag ? -1 : 1));
    });

    this.setCurrentPaging(null);
    this.FilterByPaging();

  }
